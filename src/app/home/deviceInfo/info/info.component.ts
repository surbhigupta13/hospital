import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { equipmentStatus,  deptcheck, equiptechLevel, serviceModel, equipPhysicalLevel, equipmentOwner, purchaseVendor, 
  Conditionalriskfactor, AdjustedRiskScore, PMSchedule, PMProcType, PMModel, alarmPriority, RiskPatient, AlarmFatigue,
PotentialforHarm, BestPractices} from '../dropdown/dropdown.data';
@Component({
  selector: 'app-info',
  templateUrl: './info.component.html',
  styleUrls: ['./info.component.css']
})
export class InfoComponent implements OnInit{
  public dropdown = {
    equipmentStatus: equipmentStatus,
    deptcheck: deptcheck,
    equiptechLevel: equiptechLevel,
    serviceModel: serviceModel,
    equipPhysicalLevel: equipPhysicalLevel,
    equipmentOwner: equipmentOwner,
    purchaseVendor: purchaseVendor,
    Conditionalriskfactor: Conditionalriskfactor,
    AdjustedRiskScore: AdjustedRiskScore,
    PMSchedule: PMSchedule,
    PMProcType:  PMProcType,
    PMModel: PMModel,
    alarmPriority: alarmPriority,
    RiskPatient: RiskPatient,
    AlarmFatigue: AlarmFatigue,
    PotentialforHarm: PotentialforHarm,
    BestPractices: BestPractices
  }
  public device ={
   info:{
    control: '',
    serial:'',
    endOfSupport:'',
    entity:'',
    softwareVersion:'',
    equipmentStatus:'',
    entityGroup:'',
    UMDNS:'',
    dateRetired:'',
    vendorSystemID:'',
    building:'',
    mainControl:'',
    room:'',
    deptCheck:'',
    facilityAsset:'',
    location:'',
    eqtechlevel:'',
    priorControl:'',
    serviceModel:'',
    eqPhysicalcond:'',
    costCentre:'',
    equipmentOwner:'',
    hasbattery:'',
    costCentreExp:'',
    battery:'',
    manufacturer:'',
    purchaseDate:'',
    batteryLastChange:'',
    AltManufacturer:'',
    purchaseVendor:'',
    batteryNextchange:'',
    deviceType:'',
    purchasecost:'',
    hasServiceManual:'',
    hasOperatorManual:'',
    AltDescription:'',
    PONumber:'',
    comments:'',
    commonName:'',
    MfgDate:'',
    model:'',
    dateinService:''
   },
   warranty:{
    deviceid:'',
    riskScore:'',
    PMProcedure:'',
    vendor:'',
    priority:'',
    responsibleTech:'',
    labourCoverage:'',
    PMFrequency:'',
    PMModel:'',
    warrantyStart:'',
    conditionalRiskFactor:'',
    PMType:'',
    warrantyCMLaborEnd:'',
    adjustedRiskScore:'',
    warrantyCMPartsEnd:'',
    ajustedPriority:'',
    directContract:'',
    passThroughContract:'',
    warrantyPMLaborEnd:'',
    adjustedFrequency:'',
    assumedContract:'',
    noContract:'',
    warrantyPMPartsEnd:'',
    customerRiskScore:'',
    contractCost:'',
    warrantyNotes:'',
    comments:'',
    contractStart:'',
    contractEnd:'',
    functionalRisk:'',
    equipmentonPM:'',
    totalCost:'',
    physicalRisk:'',
    PMSchedule:'',
    coverageHrs:'',
    CMRequirements:'',
    PMProcType:'',
    parts:'',
    PO:'',
   },
   ephi:{
    hasePHI:'',
    OEMTubeModel:'',
    devicehasAlarm:'',
    generateMultiAlarm:'',
    ePHIInteg:'',
    OEMTubeSerial:'',
    alarmPriority:'',
    ePHIIntegProbability:'',
    MaxKV:'',
    riskPatient:'',
    ePHIIntegScore:'',
    lastReplace:'',
    alarmFatigue:'',
    ePHIAvailCriticality:'',
    OEMImgPN:'',
    potentialforHarm:'',
    ePHIAvailProbability:'',
    manufacturer:'',
    bestPractices:'',
    ePHIAvailScore:'',
    model:'',
    ePHIConfCriticality:'',
    serial:'',
    ePHIConf:'',
    systemName:'',
    ePHIConfScore:'',
    interfaceType:'',
    ePHITotalRisk:'',
    daylightsavings:'',
    customerPHI:'',
    stateReg:''
   },
   nwInfo:{
    interfaceType:'',
    AETitle:'',
    AVRequired:'',
    daylightsavingstime:'',
    AEPortNumber:'',
    AVInstalled:'',
    MACAddress:'',
    workList:'',
    AVType:'',
    IPAddress:'',
    Firewall:'',
    subnetMask:'',
    fileLocation:'',
    Comments:'',
    defaultGateway:'',
    name:'',
    domainName:'',
    Date:'',
    DNSServer:'',
    UsesDHCP:'',
    backupScheduled:'',
    DNSRequired:'',
    backupType:'',
    OS:'',
    OSVersion:''
   }
};
  constructor(public router: Router) {}
  ngOnInit () {

  }
  
  
}
